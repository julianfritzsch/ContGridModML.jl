var documenterSearchIndex = {"docs":
[{"location":"#Machine-Learning-Package-for-ContGridMod","page":"Introduction","title":"Machine Learning Package for ContGridMod","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Implementation of physics-informed machine learning routines for the continous power grid model package ContGridMod.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ContGridModML can easily be installed using the Julia package manager.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\njulia> Pkg.add(url=\"https://github.com/julianfritzsch/ContGridMod.jl\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nThis package needs the FiniteElements branch of ContGridMod. This might conflict with preinstalled versions of ContGridMod. If there are any problems using this package, remove any versions of ContGridMod checked out for development and try again.","category":"page"},{"location":"#Quickstart-Guide","page":"Introduction","title":"Quickstart Guide","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To reproduce the results you only need to run two functions. The static paramaters, i.e., the susceptances in x and y direction (b_x(mathbfr) and b_y(mathbfr)), can be learned by running","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> sol = learn_susceptances()","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Similarly, to learn the dynamical parameters, i.e., the inertia m(mathbfr) and the damping d(mathbfr), run","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> sol = learn_dynamical_parameters()","category":"page"},{"location":"api/public/#Public-API","page":"Public","title":"Public API","text":"","category":"section"},{"location":"api/public/","page":"Public","title":"Public","text":"Exported functions and types of ContGridMod.jl.","category":"page"},{"location":"api/public/#Contents","page":"Public","title":"Contents","text":"","category":"section"},{"location":"api/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]\nDepths = 2:2","category":"page"},{"location":"api/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"api/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"api/public/#Structs","page":"Public","title":"Structs","text":"","category":"section"},{"location":"api/public/","page":"Public","title":"Public","text":"ContGridModML.StaticSol\nContGridModML.DynamicSol","category":"page"},{"location":"api/public/#ContGridModML.StaticSol","page":"Public","title":"ContGridModML.StaticSol","text":"Contains the results of the static training.\n\nb::Vector{<:Real}: Vector of the nodal susceptances. The ordering is alternating b_x and b_y. The values are ordered in the same order as in the DoF handler cm.dh₁.\n\nlosses::Matrix{<:Real}: The training losses. The row corresponds to the epoch and the column to the data set.\n\ntrain_pred::Matrix{<:Real}: Prediction of the values for each training data set with the trained values.\n\ntest_pred::Matrix{<:Real}: Prediction of the values for each test data set with the trained values.\n\nt_train::Matrix{<:Real}: Ground truth data for the training data sets.\n\nt_test::Matrix{<:Real}: Ground truth data for the test data sets.\n\ntrain_losses::Vector{<:Real}: Loss values for all training data sets.\n\ntest_losses::Vector{<:Real}: Loss values for all test data sets.\n\nmodel::ContGridMod.ContModel: The continuous model with the updated susceptances.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#ContGridModML.DynamicSol","page":"Public","title":"ContGridModML.DynamicSol","text":"Contains the results of the dynamic training.\n\ntrain_ix::Vector{<:Integer}: Indices of the generators used to create the training ground truth data.\n\ntest_ix::Vector{<:Integer}: Indices of the generators used to create the training ground truth data.\n\ncomp_ix::Vector{<:Integer}: Indices of the nodes on which the frequency is compared to calculate the loss function.\n\nm::Vector{<:Real}: Vector of the nodal inertia. The values are ordered in the same order as in the DoF handler cm.dh₁.\n\nd::Vector{<:Real}: Vector of the nodal damping. The values are ordered in the same order as in the DoF handler cm.dh₁.\n\ncoeffs::Vector{<:Real}: Coefficients of the modal expansion of the dynamical parameters. The realtion between the nodal values, the coefficients, and the eigenvectors is given by\nn = size(coeffs, 1) ÷ 2\nm = eve[:, 1:n] * coeffs[1:n]\nd = eve[:, 1:n] * coeffs[n+1:end]\n\neve::Matrix{<:Real}: Eigenvectors of the unweighted Laplacian of the grid of the continuous model.\n\nlosses::Matrix{<:Real}: The training losses. The row corresponds to the epoch and the column to the data set.\n\ntrain_losses::Vector{<:Real}: Loss values for all training data sets.\n\ntest_losses::Vector{<:Real}: Loss values for all test data sets.\n\nmodel::ContGridMod.ContModel: The continuous model with updated inertia and damping.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#Functions","page":"Public","title":"Functions","text":"","category":"section"},{"location":"api/public/","page":"Public","title":"Public","text":"learn_susceptances\nlearn_dynamical_parameters","category":"page"},{"location":"api/public/#ContGridModML.learn_susceptances","page":"Public","title":"ContGridModML.learn_susceptances","text":"learn_susceptances(\n;\n    train_fn,\n    test_fn,\n    grid_fn,\n    n_train,\n    n_test,\n    n_epochs,\n    n_batches,\n    tf,\n    κ,\n    σ,\n    seed,\n    bmin,\n    δ\n) -> ContGridModML.StaticSol\n\n\nLearn the line susceptances.\n\nThe parameters are learned by calculating the stable solution for multiple dispatches and comparing them to the results from the discrete model. The comparison points are obtained by using the liear approximation provided by the finite element method.\n\nArguments\n\ntrain_fn::String = MODULE_FOLDER * \"/data/ml/training_\": The names of the files   containing the training scenarios. The files must be labeled train_fn1.h5,   train_fn2.h5, etc.\ntest_fn::String = MODULE_FOLDER * \"/data/ml/test_\": The names of the files   containing the test scenarios. The files must be labeled test.h5, test.h5, etc.\ngrid_fn::String = MODULE_FOLDER * \"/data/panta.msh\": Name of the file containing the mesh\nn_train::Int = 48: Number of training data sets\nn_test::Int = 12: Number of test data sets\nn_epochs::Int = 10000: Number of epochs\nn_batches::Int = 3: Number of batches per epoch\ntf::Real = 0.05: Duration of the heat equation diffusion for the power distribution \nκ::Real = 0.02: Diffusion constant of the heat equation diffusion for the power   distribution\nσ::Real = 0.01: Standard deviation for the initial Gaussian distribution of the   parameters\nseed::Union{Nothing, Integer} = 1709: Seed for the ranom selection of batches and the   initial guess of b_x and b_y\nbmin::Real = 0.1: Minimimum value of the suscpetances\nδ = 0.5: Parameter of the Huber loss function\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ContGridModML.learn_dynamical_parameters","page":"Public","title":"ContGridModML.learn_dynamical_parameters","text":"learn_dynamical_parameters(\n;\n    dm_fn,\n    cm_fn,\n    dP,\n    n_train,\n    n_test,\n    dt,\n    tf,\n    disc_solve_kwargs,\n    cont_solve_kwargs,\n    lambda_solve_kwargs,\n    seed,\n    σ,\n    n_coeffs,\n    n_modes,\n    n_epochs,\n    max_function,\n    train_ix,\n    test_ix\n) -> ContGridModML.DynamicSol\n\n\nArguments\n\ndm_fn::String = MODULE_FOLDER * \"/docs/dm.h5\": File name of the discrete model\ncm_fn::String = MODULE_FOLDER * \"/docs/cm.h5\": File name of the continuous model\ndP::Real = -9.0: Fault size to be simulated\nn_train::Integer = 12: Amount of faults to consider for training\nn_test::Integer = 4: Amount of faults to consider for testing\ndt::Real = 0.01: Step size at which the solutions of the ODEs are saved\ntf::Real = 25.0: Duration of the simulations\ndisc_solve_kwargs::Dict{Symbol, <:Any} = Dict{Symbol, Any}(): Keyword arguments passed  to the ODE solver for the discrete model\ncont_solve_kwargs::Dict{Symbol, <:Any} = Dict{Symbol, Any}(): Keyword arguments passed  to the ODE solver for the continuous model\nlambda_solve_kwargs::Dict{Symbol, <:Any} = Dict{Symbol, Any}(:saveat => 0.1,  :abstol => 1e-3, :reltol => 1e-2): Keyword arguments passed to the ODE solver of the  adjoint equations\nseed::Union{Nothing, Integer} = 1709: Seed for the random number generator to be used   to pick the training and test generators\nσ = 0.05: Standard deviation of the Gaussian used to distribute the fault\nn_coeffs = 1: Number of coefficients that are non-zero at the beginning of the  training. They correspond to the n_coeffs lowest modes of the Laplacian.\nn_modes = 20: Number of modes the Laplacian that are used to expand the parameters.\nn_epochs = 8000: Number of epochs used for the training.\nmax_function::Function = (x) -> 30 * 2^(x / 500): Function that changes the magnitude  of the change vector of the parameters wrt the epoch.\ntrain_ix::Union{Nothing, Vector{<:Integer}} = nothing: Indices of the generators used  for training if they are not supposed to be picked randomly.\ntest_ix::Union{Nothing, Vector{<:Integer}} = nothing: Indices of the generators used  for testing if they are not supposed to be picked randomly.\n\nwarning: Warning\nIf the training and test generators are not supposed to be picked randomly, both train_ix and test_ix need to be passed.\n\n\n\n\n\n","category":"function"}]
}
